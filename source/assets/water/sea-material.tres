[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[ext_resource path="res://assets/water/displacement.png" type="Texture" id=1]
[ext_resource path="res://assets/water/sea-texture.png" type="Texture" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode blend_mix;

uniform vec4 water_color : hint_color = vec4(1.0);
uniform vec2 uv1 = vec2(1.0);
uniform vec2 texture_movement = vec2(0.0, 1.0);

uniform vec4 edge_color : hint_color = vec4(1.0);
uniform float edge_max_threshold = 0.5;
uniform float displ_amount = 0.6;
uniform float near = 0.15;
uniform float far = 300.0;

uniform float wave_height;
uniform float wave_length;
uniform vec2 wave_velocity = vec2(0.0, 1.0);

uniform sampler2D water_texture : hint_white;
uniform sampler2D displ_tex : hint_white;



// This function turns distances from depth texture into linear system.
float linearize(float c_depth) {
	c_depth = 2.0 * c_depth - 1.0;
	return near * far / (far + c_depth * (near - far));
}

// Fragment function deals with edge foams and water texture.
void fragment() {
	
	// These calculate the distance between the water and whatever's behind it,
	// exactly at the pixel we are looking at.
	float zdepth = linearize(texture(DEPTH_TEXTURE, SCREEN_UV).x);
	float zpos = linearize(FRAGCOORD.z);
	float diff = zdepth - zpos;
	
	// These randomize the difference calculated previously using the displacement
	// texture and amount.
	vec2 displ = texture(displ_tex, UV - TIME / 14.0).rg;
	displ = ((displ * 2.0) - 1.0) * displ_amount;
	diff += displ.x;
	
	// If the final difference with displacement is smaller than the max threshold,
	// we paint the pixel with the edge color.
	vec4 main_color = water_color * texture(water_texture, UV * uv1 + TIME * texture_movement);
	vec4 col = mix(edge_color, main_color, step(edge_max_threshold, diff));
	ALBEDO = col.rgb;
	ALPHA = col.a;
}



// Vertex function deals with the waves.
void vertex() {
	
	// These project the vertex coordinates into the wave's direction so we
	// can know its position in the wave.
	vec2 coords = (WORLD_MATRIX * vec4(VERTEX, 1.0)).xz;
	float wave = dot(normalize(wave_velocity), coords);
	
	// Add time and wave length.
	wave = (wave + TIME * length(wave_velocity)) / wave_length;
	
	// Apply the wave effect.
	VERTEX += NORMAL * wave_height * sin(wave);
}


"

[resource]
resource_local_to_scene = true
shader = SubResource( 1 )
shader_param/water_color = Color( 0.588235, 0.611765, 0.784314, 1 )
shader_param/uv1 = Vector2( 20, 20 )
shader_param/texture_movement = Vector2( 0.06, 0.03 )
shader_param/edge_color = Color( 0.588235, 0.611765, 0.784314, 1 )
shader_param/edge_max_threshold = 0.5
shader_param/displ_amount = 1.0
shader_param/near = 0.15
shader_param/far = 300.0
shader_param/wave_height = 0.2
shader_param/wave_length = 5.0
shader_param/wave_velocity = Vector2( 0, 7.5 )
shader_param/water_texture = ExtResource( 2 )
shader_param/displ_tex = ExtResource( 1 )
