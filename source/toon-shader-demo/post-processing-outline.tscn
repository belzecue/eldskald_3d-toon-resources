[gd_scene load_steps=25 format=2]

[ext_resource path="res://change-colors.gd" type="Script" id=1]
[ext_resource path="res://toon-shader-demo/toon.shader" type="Shader" id=2]
[ext_resource path="res://assets/meshes/cylinder01.obj" type="ArrayMesh" id=3]
[ext_resource path="res://assets/meshes/cone01.obj" type="ArrayMesh" id=4]
[ext_resource path="res://assets/meshes/pineleaves00.obj" type="ArrayMesh" id=5]
[ext_resource path="res://assets/meshes/red-blue-cube-01.obj" type="ArrayMesh" id=6]
[ext_resource path="res://player.tscn" type="PackedScene" id=7]
[ext_resource path="res://assets/meshes/torus01.obj" type="ArrayMesh" id=8]
[ext_resource path="res://assets/meshes/ground.obj" type="ArrayMesh" id=9]
[ext_resource path="res://assets/textures/ibm-pc-colors.png" type="Texture" id=10]
[ext_resource path="res://rotate.gd" type="Script" id=12]
[ext_resource path="res://assets/meshes/treetrunk00.obj" type="ArrayMesh" id=13]

[sub_resource type="QuadMesh" id=1]
size = Vector2( 2, 2 )

[sub_resource type="Shader" id=2]
code = "shader_type spatial;
render_mode unshaded;

uniform vec4 outline_color: hint_color = vec4(0.0, 0.0, 0.0, 1.0);
uniform int outline_thickness: hint_range(1, 10) = 1;

uniform float sensitivity;



// This keeps the QuadMesh following the screen at all times.
void vertex() {
	POSITION = vec4(VERTEX, 1.0);
}



// This function returns the distance from the pixel of UV uv+d_uv, where uv
// is the current uv being rendered. Also, depth must be equal to DEPTH_TEXTURE
// and inv must be equal to INV_PROJECTION_MATRIX.
float get_depth(vec2 d_uv, vec2 uv, sampler2D depth, mat4 inv) {
	vec3 ndc = vec3(uv + d_uv, texture(depth, uv + d_uv).x)*2.0 - 1.0;
	vec4 view = inv*vec4(ndc, 1.0);
	return -view.z/view.w;
}



void fragment() {
	vec3 color = texture(SCREEN_TEXTURE, SCREEN_UV).rgb;
	
	// We'll use the Roberts cross operator method.
	vec2 size = float(outline_thickness)*vec2(1./VIEWPORT_SIZE.x, 1./VIEWPORT_SIZE.y);
	float top_left = get_depth(vec2(-1.,-1.)*size, SCREEN_UV, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
	float top_right = get_depth(vec2(1.,-1.)*size, SCREEN_UV, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
	float bot_left = get_depth(vec2(-1.,1.)*size, SCREEN_UV, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
	float bot_right = get_depth(vec2(1.,1.)*size, SCREEN_UV, DEPTH_TEXTURE, INV_PROJECTION_MATRIX);
	float edge = sqrt(pow(top_left - bot_right, 2) + pow(top_right - bot_left, 2))*100.0;
	color += (outline_color.rgb - color)*step(sensitivity, edge);
	
	ALBEDO = color;
}
"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )
shader_param/outline_color = Color( 0, 0, 0, 1 )
shader_param/outline_thickness = 1
shader_param/sensitivity = 50.0

[sub_resource type="ShaderMaterial" id=4]
shader = ExtResource( 2 )
shader_param/albedo_color = Color( 1, 1, 1, 1 )
shader_param/use_color = null
shader_param/shade_threshold = 0.0
shader_param/specular_threshold = 0.5
shader_param/specular_glossiness = 15.0
shader_param/specular_brightness = 0.3
shader_param/rim_amount = 0.8
shader_param/rim_threshold = 0.2
shader_param/rim_brightness = 0.3
shader_param/albedo = ExtResource( 10 )

[sub_resource type="ShaderMaterial" id=5]
shader = ExtResource( 2 )
shader_param/albedo_color = Color( 1, 1, 1, 1 )
shader_param/use_color = null
shader_param/shade_threshold = 0.0
shader_param/specular_threshold = 1.0
shader_param/specular_glossiness = 15.0
shader_param/specular_brightness = 0.0
shader_param/rim_amount = 1.0
shader_param/rim_threshold = 0.2
shader_param/rim_brightness = 0.0
shader_param/albedo = ExtResource( 10 )

[sub_resource type="SphereMesh" id=6]

[sub_resource type="ShaderMaterial" id=7]
shader = ExtResource( 2 )
shader_param/albedo_color = Color( 0.333333, 0.333333, 0.333333, 1 )
shader_param/use_color = true
shader_param/shade_threshold = 0.0
shader_param/specular_threshold = 0.5
shader_param/specular_glossiness = 15.0
shader_param/specular_brightness = 0.3
shader_param/rim_amount = 0.75
shader_param/rim_threshold = 0.2
shader_param/rim_brightness = 0.3

[sub_resource type="ShaderMaterial" id=8]
shader = ExtResource( 2 )
shader_param/albedo_color = Color( 1, 1, 1, 1 )
shader_param/use_color = null
shader_param/shade_threshold = 0.0
shader_param/specular_threshold = 0.5
shader_param/specular_glossiness = 15.0
shader_param/specular_brightness = 0.3
shader_param/rim_amount = 0.7
shader_param/rim_threshold = 0.2
shader_param/rim_brightness = 0.3
shader_param/albedo = ExtResource( 10 )

[sub_resource type="ShaderMaterial" id=9]
shader = ExtResource( 2 )
shader_param/albedo_color = Color( 1, 1, 1, 1 )
shader_param/use_color = null
shader_param/shade_threshold = 0.0
shader_param/specular_threshold = 0.5
shader_param/specular_glossiness = 15.0
shader_param/specular_brightness = 0.3
shader_param/rim_amount = 0.7
shader_param/rim_threshold = 0.2
shader_param/rim_brightness = 0.3
shader_param/albedo = ExtResource( 10 )

[sub_resource type="ShaderMaterial" id=10]
shader = ExtResource( 2 )
shader_param/albedo_color = Color( 1, 1, 1, 1 )
shader_param/use_color = null
shader_param/shade_threshold = 0.0
shader_param/specular_threshold = 0.5
shader_param/specular_glossiness = 15.0
shader_param/specular_brightness = 0.3
shader_param/rim_amount = 0.8
shader_param/rim_threshold = 0.2
shader_param/rim_brightness = 0.3
shader_param/albedo = ExtResource( 10 )

[sub_resource type="ShaderMaterial" id=11]
shader = ExtResource( 2 )
shader_param/albedo_color = Color( 1, 1, 1, 1 )
shader_param/use_color = null
shader_param/shade_threshold = 0.0
shader_param/specular_threshold = 1.0
shader_param/specular_glossiness = 15.0
shader_param/specular_brightness = 0.3
shader_param/rim_amount = 0.7
shader_param/rim_threshold = 0.2
shader_param/rim_brightness = 0.3
shader_param/albedo = ExtResource( 10 )

[sub_resource type="ShaderMaterial" id=12]
shader = ExtResource( 2 )
shader_param/albedo_color = Color( 1, 1, 1, 1 )
shader_param/use_color = null
shader_param/shade_threshold = 0.0
shader_param/specular_threshold = 1.0
shader_param/specular_glossiness = 15.0
shader_param/specular_brightness = 0.0
shader_param/rim_amount = 0.7
shader_param/rim_threshold = 0.2
shader_param/rim_brightness = 0.3
shader_param/albedo = ExtResource( 10 )

[node name="Spatial" type="Spatial"]

[node name="PostProcessing" type="ViewportContainer" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Viewport" type="Viewport" parent="PostProcessing"]
size = Vector2( 1024, 576 )
handle_input_locally = false
msaa = 2
render_target_update_mode = 3
shadow_atlas_size = 1

[node name="OutlinePP" type="MeshInstance" parent="PostProcessing/Viewport"]
extra_cull_margin = 16384.0
mesh = SubResource( 1 )
material/0 = SubResource( 3 )

[node name="DirectionalLight" type="DirectionalLight" parent="PostProcessing/Viewport"]
transform = Transform( 0.965926, -0.12941, 0.224144, 0, 0.866025, 0.5, -0.258819, -0.482963, 0.836516, 0, 0, 6 )
shadow_enabled = true

[node name="Player" parent="PostProcessing/Viewport" instance=ExtResource( 7 )]
transform = Transform( 2, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 3 )

[node name="red-blue-cube" type="MeshInstance" parent="PostProcessing/Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 2, -1 )
mesh = ExtResource( 6 )
material/0 = SubResource( 4 )
script = ExtResource( 12 )

[node name="ground" type="MeshInstance" parent="PostProcessing/Viewport"]
mesh = ExtResource( 9 )
material/0 = SubResource( 5 )

[node name="sphere" type="MeshInstance" parent="PostProcessing/Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 4.05954, 2.16381, 0.995895 )
mesh = SubResource( 6 )
material/0 = SubResource( 7 )
script = ExtResource( 1 )

[node name="Timer" type="Timer" parent="PostProcessing/Viewport/sphere"]
wait_time = 2.0
one_shot = true
autostart = true

[node name="cone00" type="MeshInstance" parent="PostProcessing/Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.92434, 2.03448, -1.72205 )
mesh = ExtResource( 4 )
material/0 = SubResource( 8 )

[node name="cylinder00" type="MeshInstance" parent="PostProcessing/Viewport"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -2.37365, 1.61603, 1.36919 )
mesh = ExtResource( 3 )
material/0 = SubResource( 9 )

[node name="torus00" type="MeshInstance" parent="PostProcessing/Viewport"]
transform = Transform( 2, 0, 0, 0, 2, 0, 0, 0, 2, -5.43669, 1.52002, 4.89599 )
mesh = ExtResource( 8 )
material/0 = SubResource( 10 )

[node name="treetrunk00" type="MeshInstance" parent="PostProcessing/Viewport"]
transform = Transform( 0.4, 0, 0, 0, 0.4, 0, 0, 0, 0.4, -6, 0.1, -3 )
mesh = ExtResource( 13 )
material/0 = SubResource( 11 )

[node name="pineleaves00" type="MeshInstance" parent="PostProcessing/Viewport/treetrunk00"]
transform = Transform( 2.5, 0, 0, 0, 2.5, 0, 0, 0, 2.5, 0, 5.8, 0 )
mesh = ExtResource( 5 )
material/0 = SubResource( 12 )
[connection signal="timeout" from="PostProcessing/Viewport/sphere/Timer" to="PostProcessing/Viewport/sphere" method="_on_Timer_timeout"]

[editable path="PostProcessing/Viewport/Player"]
