[gd_scene load_steps=19 format=2]

[ext_resource path="res://player.tscn" type="PackedScene" id=1]
[ext_resource path="res://assets/meshes/icosahedron.obj" type="ArrayMesh" id=2]
[ext_resource path="res://rotate.gd" type="Script" id=3]
[ext_resource path="res://outline-shader-demo/normals.tres" type="Material" id=4]
[ext_resource path="res://assets/meshes/ground.obj" type="ArrayMesh" id=5]
[ext_resource path="res://demo.gd" type="Script" id=6]
[ext_resource path="res://icon.png" type="Texture" id=7]
[ext_resource path="res://outline-shader-demo/distances.tres" type="Material" id=8]
[ext_resource path="res://outline-shader-demo/views.tres" type="Material" id=9]

[sub_resource type="QuadMesh" id=1]
size = Vector2( 2, 2 )

[sub_resource type="CubeMesh" id=2]
size = Vector3( 1, 1, 1 )

[sub_resource type="SphereMesh" id=3]

[sub_resource type="QuadMesh" id=4]
size = Vector2( 2, 2 )

[sub_resource type="Shader" id=5]
code = "shader_type canvas_item;

uniform int outline_thickness: hint_range(1, 10) = 1;
uniform float distance_sensitivity;
uniform float normals_sensitivity;

uniform sampler2D distances;
uniform sampler2D normals;
uniform sampler2D views;

void fragment() {
	float color = 0.0;
	vec2 size = vec2(SCREEN_PIXEL_SIZE.x, SCREEN_PIXEL_SIZE.y);
	vec2 top_left = vec2(-1.*ceil(float(outline_thickness)/2.), -1.*floor(float(outline_thickness)/2.))*SCREEN_PIXEL_SIZE;
	vec2 top_right = vec2(-1.*ceil(float(outline_thickness)/2.), ceil(float(outline_thickness)/2.))*SCREEN_PIXEL_SIZE;
	vec2 bot_left = vec2(floor(float(outline_thickness)/2.), -1.*floor(float(outline_thickness)/2.))*SCREEN_PIXEL_SIZE;
	vec2 bot_right = vec2(floor(float(outline_thickness)/2.), ceil(float(outline_thickness)/2.))*SCREEN_PIXEL_SIZE;
	
	// We'll use the Roberts cross operator method. First on the depth.
	float top_left_d = (1.0 - texture(distances, SCREEN_UV + top_left).x)*100.0;
	float top_right_d = (1.0 - texture(distances, SCREEN_UV + top_right).x)*100.0;
	float bot_left_d = (1.0 - texture(distances, SCREEN_UV + bot_left).x)*100.0;
	float bot_right_d = (1.0 - texture(distances, SCREEN_UV + bot_right).x)*100.0;
	float edge_d = pow((top_left_d - bot_right_d)/float(outline_thickness), 2);
	edge_d += pow((top_right_d - bot_left_d)/float(outline_thickness), 2);
	vec3 normal = (texture(normals, SCREEN_UV).xyz - vec3(0.5))*2.0;
	vec3 view = (texture(views, SCREEN_UV).xyz - vec3(0.5))*2.0;
	float depth = texture(distances, SCREEN_UV).x;
	color += step(distance_sensitivity*(1.001 - dot(normal, view)), edge_d*depth);
	
	// Now on the normals.
	vec3 top_left_n = (texture(normals, SCREEN_UV + top_left).xyz - vec3(0.5))*2.0;
	vec3 top_right_n = (texture(normals, SCREEN_UV + top_right).xyz - vec3(0.5))*2.0;
	vec3 bot_left_n = (texture(normals, SCREEN_UV + bot_left).xyz - vec3(0.5))*2.0;
	vec3 bot_right_n = (texture(normals, SCREEN_UV + bot_right).xyz - vec3(0.5))*2.0;
	float edge_n = dot(top_left_n - bot_right_n, top_left_n - bot_right_n);
	edge_n += dot(top_right_n - bot_left_n, top_right_n - bot_left_n);
	edge_n = edge_n*10000.0;
	color += step(normals_sensitivity*pow(float(outline_thickness), 2), edge_n);
	
	COLOR = vec4(color, color, color, 1.0);
}
"

[sub_resource type="ViewportTexture" id=6]
viewport_path = NodePath("Distance")

[sub_resource type="ViewportTexture" id=7]
viewport_path = NodePath("Distance/Normals")

[sub_resource type="ViewportTexture" id=8]
viewport_path = NodePath("Views")

[sub_resource type="ShaderMaterial" id=9]
resource_local_to_scene = true
shader = SubResource( 5 )
shader_param/outline_thickness = 1
shader_param/distance_sensitivity = 25.0
shader_param/normals_sensitivity = 125.0
shader_param/distances = SubResource( 6 )
shader_param/normals = SubResource( 7 )
shader_param/views = SubResource( 8 )

[node name="Demo" type="Spatial"]
script = ExtResource( 6 )
sec_pass_camera = [ NodePath("Distance/Camera") ]

[node name="Distance" type="Viewport" parent="."]
size = Vector2( 1024, 576 )
handle_input_locally = false
keep_3d_linear = true
render_target_update_mode = 3

[node name="Camera" type="Camera" parent="Distance"]
cull_mask = 5
fov = 50.0

[node name="Distances" type="MeshInstance" parent="Distance/Camera"]
layers = 4
extra_cull_margin = 16384.0
mesh = SubResource( 1 )
material/0 = ExtResource( 8 )

[node name="Normals" type="Viewport" parent="Distance"]
size = Vector2( 1024, 576 )
handle_input_locally = false
keep_3d_linear = true
render_target_update_mode = 3

[node name="Player" parent="Distance/Normals" instance=ExtResource( 1 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 5 )

[node name="Camera" parent="Distance/Normals/Player" index="0"]
cull_mask = 1
environment = null

[node name="Ground" type="MeshInstance" parent="Distance/Normals"]
mesh = ExtResource( 5 )
material/0 = ExtResource( 4 )

[node name="Icosahedron" type="MeshInstance" parent="Distance/Normals"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.24809, 0 )
mesh = ExtResource( 2 )
material/0 = ExtResource( 4 )
script = ExtResource( 3 )

[node name="Cube" type="MeshInstance" parent="Distance/Normals"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.65501, 1.00844, 1.47833 )
mesh = SubResource( 2 )
material/0 = ExtResource( 4 )

[node name="Cube2" type="MeshInstance" parent="Distance/Normals"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.724182, 1.28083, 2.71906 )
mesh = SubResource( 2 )
material/0 = ExtResource( 4 )

[node name="Sphere" type="MeshInstance" parent="Distance/Normals"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3, 1.27206, 1 )
mesh = SubResource( 3 )
material/0 = ExtResource( 4 )

[node name="Views" type="Viewport" parent="."]
size = Vector2( 1024, 576 )
handle_input_locally = false
keep_3d_linear = true
render_target_update_mode = 3

[node name="Camera" type="Camera" parent="Views"]
cull_mask = 2
fov = 50.0

[node name="View" type="MeshInstance" parent="Views/Camera"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -1 )
layers = 2
mesh = SubResource( 4 )
material/0 = ExtResource( 9 )

[node name="Composition" type="TextureRect" parent="."]
material = SubResource( 9 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 7 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}

[editable path="Distance/Normals/Player"]
